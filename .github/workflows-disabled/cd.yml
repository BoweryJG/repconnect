name: CD - Deploy to Production

on:
  workflow_dispatch:  # Only manual trigger for now
  # push:
  #   branches: [ main ]

env:
  NODE_VERSION: '18.x'

jobs:
  deploy-frontend:
    name: Deploy Frontend to Netlify
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      env:
        CI: false
        GENERATE_SOURCEMAP: false
        REACT_APP_SUPABASE_URL: ${{ secrets.REACT_APP_SUPABASE_URL }}
        REACT_APP_SUPABASE_ANON_KEY: ${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}
        REACT_APP_BACKEND_URL: ${{ secrets.REACT_APP_BACKEND_URL }}
        REACT_APP_HARVEY_API_URL: ${{ secrets.REACT_APP_HARVEY_API_URL }}
        REACT_APP_HARVEY_WS_URL: ${{ secrets.REACT_APP_HARVEY_WS_URL }}
        REACT_APP_TWILIO_PHONE_NUMBER: ${{ secrets.REACT_APP_TWILIO_PHONE_NUMBER }}
        REACT_APP_DEEPGRAM_API_KEY: ${{ secrets.REACT_APP_DEEPGRAM_API_KEY }}
        REACT_APP_MOSHI_API_URL: ${{ secrets.REACT_APP_MOSHI_API_URL }}
        REACT_APP_METERED_TURN_USERNAME: ${{ secrets.REACT_APP_METERED_TURN_USERNAME }}
        REACT_APP_METERED_TURN_CREDENTIAL: ${{ secrets.REACT_APP_METERED_TURN_CREDENTIAL }}
        
    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v2.0
      with:
        publish-dir: './build'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
        enable-pull-request-comment: false
        enable-commit-comment: true
        overwrites-pull-request-comment: false
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      timeout-minutes: 10

  deploy-backend:
    name: Deploy Backend to Render
    runs-on: ubuntu-latest
    environment: production
    needs: deploy-frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Render
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      run: |
        curl -X POST \
          "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
          -H "Authorization: Bearer ${RENDER_API_KEY}" \
          -H "Content-Type: application/json" \
          -d '{"clearCache": "clear"}'
          
    - name: Wait for deployment
      run: sleep 60
      
    - name: Health check
      run: |
        max_attempts=10
        attempt=1
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt of $max_attempts"
          if curl -f "${{ secrets.REACT_APP_BACKEND_URL }}/health"; then
            echo "Health check passed!"
            break
          fi
          sleep 30
          ((attempt++))
        done
        if [ $attempt -gt $max_attempts ]; then
          echo "Health check failed after $max_attempts attempts"
          exit 1
        fi

  deploy-harvey:
    name: Deploy Harvey AI Service
    runs-on: ubuntu-latest
    environment: production
    needs: deploy-backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Deploy Harvey
      run: npm run harvey:deploy
      env:
        NODE_ENV: production
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
        TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
        TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
        
    - name: Initialize Harvey for all reps
      run: npm run harvey:init
      
    - name: Verify Harvey status
      run: |
        curl -f "${{ secrets.REACT_APP_BACKEND_URL }}/api/harvey/status" || exit 1

  post-deployment-tests:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend, deploy-harvey]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run smoke tests
      run: |
        # Test frontend
        curl -f "${{ secrets.PRODUCTION_URL }}" || exit 1
        
        # Test API endpoints
        curl -f "${{ secrets.REACT_APP_BACKEND_URL }}/api/health" || exit 1
        
        # Test Harvey endpoints
        curl -f "${{ secrets.REACT_APP_BACKEND_URL }}/api/harvey/status" || exit 1
        
    - name: Run E2E tests
      uses: cypress-io/github-action@v6
      with:
        config: baseUrl=${{ secrets.PRODUCTION_URL }}
        record: true
      env:
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [post-deployment-tests]
    if: always()
    
    steps:
    - name: Send Slack notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Production deployment completed'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: ${{ secrets.SLACK_WEBHOOK != '' }}